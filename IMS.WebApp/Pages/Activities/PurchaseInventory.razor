@page "/purchase"

@using IMS.UseCases.Activities.Interfaces
@using IMS.UseCases.Inventories.Interfaces
@using static IMS.WebApp.Controls.Common.AutoCompleteComponent

@inject IViewInventoriesByNameUseCase ViewInventoriesByNameUseCase
@inject IViewInventoryByIdUseCase ViewInventoryByIdUseCase
@inject IPurchaseInventoryUseCase PurchaseInventoryUseCase

@inject IJSRuntime JSRuntime

<h3>Purchase Inventory</h3>
<br/>
<EditForm id="purchase-form" Model="purchaseViewModel" OnValidSubmit="Purchase">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>
    

    <div class="form-group">
        <label for="po">Purcahse Order #</label>
        <InputText id="po" @bind-Value="purchaseViewModel.PONumber" class="form-control"></InputText>
    </div>
    <br/>
    
    <div class="card">
        <div class="card-body">
            <div class="form-group">    
                <AutoCompleteComponent
                        Label="Inventory to Purcahse"
                        SearchFunction="SearchInventory"
                        OnItemSelected="OnItemSelected"
                ></AutoCompleteComponent>
                <input type="hidden" value="@purchaseViewModel.InventoryID" />
                @if(purchaseViewModel.InventoryID > 0 && purchaseViewModel.InventoryPrice >= 0)
                {
                        <text>Price:</text>
                        @purchaseViewModel.InventoryPrice.ToString("c");
                }
            </div>
        </div>
    </div>
<br/>

    <div class="form-group">
        <label for="qty">Quantity</label>
        <InputNumber id="qty" @bind-Value="purchaseViewModel.QuantityToPurchase" class="form-control"></InputNumber>
    </div>
    <br/>
    
    <button type="submit" class="btn btn-primary">Purchase</button>
    
</EditForm>


@code {
    private PurchaseViewModel purchaseViewModel = new PurchaseViewModel();
    private Inventory? selectedInventory = null;

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (firstRender)
        {
            JSRuntime.InvokeVoidAsync("PreventFormSubmistion", "purchase-form");
        }
    }

    private async Task Purchase()
    {
            await PurchaseInventoryUseCase.ExecuteAsync(
            this.purchaseViewModel.PONumber,
            this.selectedInventory,
            this.purchaseViewModel.QuantityToPurchase,
            "Mihai"
        );

        this.purchaseViewModel = new PurchaseViewModel();
        this.selectedInventory = null;
    }

    private List<ItemViewModel>? SearchInventory(string name)
    {
        var list = ViewInventoriesByNameUseCase.ExecuteAsync(name).GetAwaiter().GetResult();
        if (list == null) return null;

        return list.Select(x => new ItemViewModel { ID = x.InventoryID, Name = x.InventoryName })?.ToList();
    }

    private async Task OnItemSelected(ItemViewModel item)
    {
        this.selectedInventory = await ViewInventoryByIdUseCase.ExecuteAsync(item.ID);

        purchaseViewModel.InventoryID = item.ID;
        purchaseViewModel.InventoryPrice = this.selectedInventory.Price;
    }
}
